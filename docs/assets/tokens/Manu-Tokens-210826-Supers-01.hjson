{ # HJSON
  # PASTA TOKENS

  # ————————————————
  # SUPER CHOICES ↓


  TKSC: {
    # scale (Sizes) Super Choices tokens
    scale: {
      base: {
          value: "2"
          description: "Base used to calculate all sizes"
          type: "other"
      }
      ratio: {
          value: "2"
          description: "Ratio used to calculate the geometric sequence"
          type: "other"
      }
      baseIndex: {
          value: "400"
          description: "Default (goto) Index used within the usual css font-inspired scale"
          type: "other"
      }
    }

    ratio: {
      # leading ratios (leading/font-size)
      leading: {
        small: {
            value: "1.2"
            description: "Leading/Font-Height ratio"
            type: "other"
        }
        medium: {
            value: "1.3"
            description: "Leading/Font-Height ratio"
            type: "other"
        }
        large: {
            value: "1.5"
            description: "Leading/Font-Height ratio"
            type: "other"
        }
      }
      # Button Height ratios (Button-Height/Button-Font-Size)
      buttonHeight: {
        small: {
            value: "2"
            description: "Button Height/Button Text Size ratio"
            type: "other"
        }
        medium: {
            value: "2.857"
            description: "Button Height/Button Text Size ratio"
            type: "other"
        }
        large: {
            value: "3"
            description: "Button Height/Button Text Size ratio"
            type: "other"
        }
      }
    }


    # Colors
    color: {
      # cyan~teal
      cyan~teal: {
        hue: {
          value: "177"
          type: "other"
        }
        saturation: {
            value: "44"
            type: "other"
        }
        lightness: {
            value: "41"
            type: "other"
        }
      }
      # orange~chocolate
      orange~chocolate: {
        hue: {
          value: "20"
          type: "other"
        }
        saturation: {
          value: "20"
          type: "other"
        }
        lightness: {
          value: "20"
          type: "other"
        }
      }
    }
    # Static Sizes
    size: {
      static-1: {
        value: "1"
        description: "1px static-size"
        type: "sizing"
      }
      static-2: {
        value: "2"
        description: "2px static-size"
        type: "sizing"
      }
      static-3: {
        value: "3"
        description: "3px static-size"
        type: "sizing"
      }
    }
  }

  # ————————————————
  # SUPER MATH ↓

  TKSM: {
    # SCALES
    scale: {
      # geometric scale (ie: fonts from 100 to 400)
      seqGeoA: {
        // 100: {
        //     value: "$TKSC.scale.base * $TKSC.scale.ratio ^ round((200 + 100 - $TKSC.scale.baseIndex) / 100)"
        //     type: "other"
        // }
        100-Calc: {
            value: "1"
            type: "other"
        }
        200: {
            value: "$TKSC.scale.base * $TKSC.scale.ratio ^ round((200 + 200 - $TKSC.scale.baseIndex) / 100)"
            type: "other"
        }
        300: {
            value: "$TKSC.scale.base * $TKSC.scale.ratio ^ round((200 + 300 - $TKSC.scale.baseIndex) / 100)"
            type: "other"
        }
        400: {
            value: "$TKSC.scale.base * $TKSC.scale.ratio ^ round((200 + 400 - $TKSC.scale.baseIndex) / 100)"
            type: "other"
        }
        500: {
            value: "$TKSC.scale.base * $TKSC.scale.ratio ^ round((200 + 500 - $TKSC.scale.baseIndex) / 100)"
            type: "other"
        }
        600: {
            value: "$TKSC.scale.base * $TKSC.scale.ratio ^ round((200 + 600 - $TKSC.scale.baseIndex) / 100)"
            type: "other"
        }
        700: {
            value: "$TKSC.scale.base * $TKSC.scale.ratio ^ round((200 + 700 - $TKSC.scale.baseIndex) / 100)"
            type: "other"
        }
        800: {
            value: "$TKSC.scale.base * $TKSC.scale.ratio ^ round((200 + 800 - $TKSC.scale.baseIndex) / 100)"
            type: "other"
        }
        900: {
            value: "$TKSC.scale.base * $TKSC.scale.ratio ^ round((200 + 900 - $TKSC.scale.baseIndex) / 100)"
            type: "other"
        }
        1000: {
            value: "$TKSC.scale.base * $TKSC.scale.ratio ^ round((200 + 1000 - $TKSC.scale.baseIndex) / 100)"
            type: "other"
        }
        1100: {
            value: "$TKSC.scale.base * $TKSC.scale.ratio ^ round((200 + 1100 - $TKSC.scale.baseIndex) / 100)"
            type: "other"
        }
      }

      # arithmetic scale #1 for font mainly › 100:"10" ←→ 800:"24"

      seqArithA: {
        100: {
            value: "$TKSC.scale.base * (8 + (100 - $TKSC.scale.baseIndex) / 100)"
            type: "other"
        }
        200: {
            value: "$TKSC.scale.base * (8 + (200 - $TKSC.scale.baseIndex) / 100)"
            type: "other"
        }
        300: {
            value: "$TKSC.scale.base * (8 + (300 - $TKSC.scale.baseIndex) / 100)"
            type: "other"
        }
        400: {
            value: "$TKSC.scale.base * (8 + (400 - $TKSC.scale.baseIndex) / 100)"
            type: "other"
        }
        500: {
            value: "$TKSC.scale.base * (8 + (500 - $TKSC.scale.baseIndex) / 100)"
            type: "other"
        }
        600: {
            value: "$TKSC.scale.base * (8 + (600 - $TKSC.scale.baseIndex) / 100)"
            type: "other"
        }
        700: {
            value: "$TKSC.scale.base * (8 + (700 - $TKSC.scale.baseIndex) / 100)"
            type: "other"
        }
        800: {
            value: "$TKSC.scale.base * (8 + (800 - $TKSC.scale.baseIndex) / 100)"
            type: "other"
        }
        900: {
            value: "$TKSC.scale.base * (8 + (900 - $TKSC.scale.baseIndex) / 100)"
            type: "other"
        }
        900: {
            value: "$TKSC.scale.base * (8 + (900 - $TKSC.scale.baseIndex) / 100)"
            type: "other"
        }
        1000: {
            value: "$TKSC.scale.base * (8 + (1000 - $TKSC.scale.baseIndex) / 100)"
            type: "other"
        }
        1100: {
            value: "$TKSC.scale.base * (8 + (1100 - $TKSC.scale.baseIndex) / 100)"
            type: "other"
        }
        1200: {
            value: "$TKSC.scale.base * (8 + (1200 - $TKSC.scale.baseIndex) / 100)"
            type: "other"
        }
        1300: {
            value: "$TKSC.scale.base * (8 + (1300 - $TKSC.scale.baseIndex) / 100)"
            type: "other"
        }
        1400: {
            value: "$TKSC.scale.base * (8 + (1400 - $TKSC.scale.baseIndex) / 100)"
            type: "other"
        }
      }

      # arithmetic scale #2 from 500 to 1100
      seqArithB: {
        500: {
            value: "$TKSM.scale.seqGeoA.400 + $TKSM.scale.seqGeoA.400 * ((500 - 400) / 100)"
            type: "other"
        }
        600: {
            value: "$TKSM.scale.seqGeoA.400 + $TKSM.scale.seqGeoA.400 * ((600 - 400) / 100)"
            type: "other"
        }
        700: {
            value: "$TKSM.scale.seqGeoA.400 + $TKSM.scale.seqGeoA.400 * ((700 - 400) / 100)"
            type: "other"
        }
        800: {
            value: "$TKSM.scale.seqGeoA.400 + $TKSM.scale.seqGeoA.400 * ((800 - 400) / 100)"
            type: "other"
        }
        900: {
            value: "$TKSM.scale.seqGeoA.400 + $TKSM.scale.seqGeoA.400 * ((900 - 400) / 100)"
            type: "other"
        }
        1000: {
            value: "$TKSM.scale.seqGeoA.400 + $TKSM.scale.seqGeoA.400 * ((1000 - 400) / 100)"
            type: "other"
        }
        1100: {
            value: "$TKSM.scale.seqGeoA.400 + $TKSM.scale.seqGeoA.400 * ((1100 - 400) / 100)"
            type: "other"
        }
        1200: {
            value: "$TKSM.scale.seqGeoA.400 + $TKSM.scale.seqGeoA.400 * ((1200 - 400) / 100)"
            type: "other"
        }
        1300: {
            value: "$TKSM.scale.seqGeoA.400 + $TKSM.scale.seqGeoA.400 * ((1300 - 400) / 100)"
            type: "other"
        }
        1400: {
            value: "$TKSM.scale.seqGeoA.400 + $TKSM.scale.seqGeoA.400 * ((1400 - 400) / 100)"
            type: "other"
        }
        1500: {
            value: "$TKSM.scale.seqGeoA.400 + $TKSM.scale.seqGeoA.400 * ((1500 - 400) / 100)"
            type: "other"
        }
        1600: {
            value: "$TKSM.scale.seqGeoA.400 + $TKSM.scale.seqGeoA.400 * ((1600 - 400) / 100)"
            type: "other"
        }
        1700: {
            value: "$TKSM.scale.seqGeoA.400 + $TKSM.scale.seqGeoA.400 * ((1700 - 400) / 100)"
            type: "other"
        }
        1800: {
            value: "$TKSM.scale.seqGeoA.400 + $TKSM.scale.seqGeoA.400 * ((1800 - 400) / 100)"
            type: "other"
        }
        1900: {
            value: "$TKSM.scale.seqGeoA.400 + $TKSM.scale.seqGeoA.400 * ((1900 - 400) / 100)"
            type: "other"
        }
        2000: {
            value: "$TKSM.scale.seqGeoA.400 + $TKSM.scale.seqGeoA.400 * ((2000 - 400) / 100)"
            type: "other"
        }
      }

      # arithmetic scale #3 from 1200 to 2000
      # (A) ↓ this won't work until this bug will be fixed › https://github.com/six7/figma-tokens/issues/209

      // seqArithC: {
      //   700: {
      //       value: "$TKSM.scale.seqArithB.600 * 1.5"
      //       type: "other"
      //   }
      //   800: {
      //       value: "$TKSM.scale.seqArithB.700 * 1.5"
      //       type: "other"
      //   }
      //   900: {
      //       value: "$TKSM.scale.seqArithB.800 * 1.5"
      //       type: "other"
      //   }
      //   1000: {
      //       value: "$TKSM.scale.seqArithB.900 * 1.5"
      //       type: "other"
      //   }
      //   1100: {
      //       value: "$TKSM.scale.seqArithB.1000 * 1.5"
      //       type: "other"
      //   }
      //   1200: {
      //       value: "$TKSM.scale.seqArithB.1100 * 1.5"
      //       type: "other"
      //   }
      //   1300: {
      //       value: "$TKSM.scale.seqArithB.1200 * 1.5"
      //       type: "other"
      //   }
      //   1400: {
      //       value: "$TKSM.scale.seqArithB.1300 * 1.5"
      //       type: "other"
      //   }
      //   1500: {
      //       value: "$TKSM.scale.seqArithB.1400 * 1.5"
      //       type: "other"
      //   }
      //   1600: {
      //       value: "$TKSM.scale.seqArithB.1500 * 1.5"
      //       type: "other"
      //   }
      //   1700: {
      //       value: "$TKSM.scale.seqArithB.1600 * 1.5"
      //       type: "other"
      //   }
      //   1800: {
      //       value: "$TKSM.scale.seqArithB.1700 * 1.5"
      //       type: "other"
      //   }
      //   1900: {
      //       value: "$TKSM.scale.seqArithB.1800 * 1.5"
      //       type: "other"
      //   }
      //   2000: {
      //       value: "$TKSM.scale.seqArithB.1900 * 1.5"
      //       type: "other"
      //   }
      // }

      # (A) ↪ Verbose workaround ↓
      seqArithC: {
        700: {
            value: "($TKSM.scale.seqGeoA.400 + $TKSM.scale.seqGeoA.400 * ((600 - 400) / 100)) * 1.5"
            type: "other"
        }
        800: {
            value: "($TKSM.scale.seqGeoA.400 + $TKSM.scale.seqGeoA.400 * ((700 - 400) / 100)) * 1.5"
            type: "other"
        }
        900: {
            value: "($TKSM.scale.seqGeoA.400 + $TKSM.scale.seqGeoA.400 * ((800 - 400) / 100)) * 1.5"
            type: "other"
        }
        1000: {
            value: "($TKSM.scale.seqGeoA.400 + $TKSM.scale.seqGeoA.400 * ((900 - 400) / 100)) * 1.5"
            type: "other"
        }
        1100: {
            value: "($TKSM.scale.seqGeoA.400 + $TKSM.scale.seqGeoA.400 * ((1000 - 400) / 100)) * 1.5"
            type: "other"
        }
        1200: {
            value: "($TKSM.scale.seqGeoA.400 + $TKSM.scale.seqGeoA.400 * ((1100 - 400) / 100)) * 1.5"
            type: "other"
        }
        1300: {
            value: "($TKSM.scale.seqGeoA.400 + $TKSM.scale.seqGeoA.400 * ((1200 - 400) / 100)) * 1.5"
            type: "other"
        }
        1400: {
            value: "($TKSM.scale.seqGeoA.400 + $TKSM.scale.seqGeoA.400 * ((1300 - 400) / 100)) * 1.5"
            type: "other"
        }
        1500: {
            value: "($TKSM.scale.seqGeoA.400 + $TKSM.scale.seqGeoA.400 * ((1400 - 400) / 100)) * 1.5"
            type: "other"
        }
        1600: {
            value: "($TKSM.scale.seqGeoA.400 + $TKSM.scale.seqGeoA.400 * ((1500 - 400) / 100)) * 1.5"
            type: "other"
        }
        1700: {
            value: "($TKSM.scale.seqGeoA.400 + $TKSM.scale.seqGeoA.400 * ((1600 - 400) / 100)) * 1.5"
            type: "other"
        }
        1800: {
            value: "($TKSM.scale.seqGeoA.400 + $TKSM.scale.seqGeoA.400 * ((1700 - 400) / 100)) * 1.5"
            type: "other"
        }
        1900: {
            value: "($TKSM.scale.seqGeoA.400 + $TKSM.scale.seqGeoA.400 * ((1800 - 400) / 100)) * 1.5"
            type: "other"
        }
        2000: {
            value: "($TKSM.scale.seqGeoA.400 + $TKSM.scale.seqGeoA.400 * ((1900 - 400) / 100)) * 1.5"
            type: "other"
        }
      }
    }

    # COLORS
    # (B) ↓ this won't work until this bug will be fixed › https://github.com/six7/figma-tokens/issues/166

    // color: {
    //   primary.400: {
    //     value: "hsla($TKSC.color.cyan~teal.hue, $TKSC.color.cyan~teal.saturation, $TKSC.color.cyan~teal.lightness, 1)"
    //     description: "Primary background color"
    //     type: "color"
    //   }
    //   primary.300: {
    //     value: "hsla($TKSC.color.cyan~teal.hue, $TKSC.color.cyan~teal.saturation, $TKSC.color.cyan~teal.lightness * 1.2439, 1)"
    //     description: "Primary background color"
    //     type: "color"
    //   }
    //   primary.500: {
    //     value: "hsla($TKSC.color.cyan~teal.hue, $TKSC.color.cyan~teal.saturation, $TKSC.color.cyan~teal.lightness * 0.7561, 1)"
    //     description: "Primary background color"
    //     type: "color"
    //   }
    //   secondary.400: {
    //     value: "hsla($TKSC.color.orange~chocolate.hue, $TKSC.color.orange~chocolate.saturation, $TKSC.color.orange~chocolate.lightness, 1)"
    //     description: "Primary background color"
    //     type: "color"
    //   }
    //   secondary.300: {
    //     value: "hsla($TKSC.color.orange~chocolate.hue, $TKSC.color.orange~chocolate.saturation, $TKSC.color.orange~chocolate.lightness * 1.2, 1)"
    //     description: "Primary background color"
    //     type: "color"
    //   }
    //   secondary.500: {
    //     value: "hsla($TKSC.color.orange~chocolate.hue, $TKSC.color.orange~chocolate.saturation, $TKSC.color.orange~chocolate.lightness * 0.8, 1)"
    //     description: "Primary background color"
    //     type: "color"
    //   }
    // }

    # (B) ↪ Fallback-harcoded workaround ↓
    color: {
      # pre-calcs for lightness · plugin bug workaround
      primary: {
        300: {
          value: "hsla(177, 44%, 51%, 1.00)"
          description: "Primary background light"
          type: "color"
        }
        400: {
          value: "hsla(177, 44%, 41%, 1.00)"
          description: "Primary background default"
          type: "color"
        }
        500: {
          value: "hsla(176, 44%, 31%, 1.00)"
          description: "Primary background darker"
          type: "color"
        }
      }
      secondary: {
        300: {
          value: "hsla(20, 76%, 60%, 1.00)"
          description: "secondary background light"
          type: "color"
        }
        400: {
          value: "hsla(20, 76%, 50%, 1.00)"
          description: "secondary background default"
          type: "color"
        }
        500: {
          value: "hsla(20, 76%, 40%, 1.00)"
          description: "secondary background darker"
          type: "color"
        }
      }
      white: {
        value: "hsla(104, 100%, 100%, 1.00)"
        description: "White"
        type: "color"
      }
      black: {
        value: "hsla(0, 0%, 0%, 1.00)"
        description: "black"
        type: "color"
      }
      gray: {
        100: {
          value: "hsla(109, 0%, 96%, 1.00)"
          description: "gray"
          type: "color"
        }
        200: {
          value: "hsla(109, 0%, 89%, 1.00)"
          description: "gray"
          type: "color"
        }
        300: {
          value: "hsla(109, 0%, 73%, 1.00)"
          description: "gray"
          type: "color"
        }
        400: {
          value: "hsla(109, 0%, 44%, 1.00)"
          description: "gray"
          type: "color"
        }
        500: {
          value: "hsla(109, 0%, 29%, 1.00)"
          description: "gray"
          type: "color"
        }
      }
      dark: {
        400: {
          value: "hsla(109, 0%, 14%, 1.00)"
          description: "dark"
          type: "color"
        }
      }
    }
  }
}
